{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","_useState2","Object","slicedToArray","motorSocket","setMotorSocket","_useState3","_useState4","motor1Rad","setMotor1Rad","_useState5","_useState6","motor2Rad","setMotor2Rad","_useState7","_useState8","motor3Rad","setMotor3Rad","_useState9","_useState10","motorInfo","setMotorInfo","useEffect","motor_socket","io","emit","id","on","value","sendMotorRotate","rad","parseFloat","showMotorInfo","info","react_default","a","createElement","position","velocity","torque","received_unix_time","className","onChange","event","target","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad37f9a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client'\n\nfunction App() {\n  const [motorSocket, setMotorSocket] = useState(null)\n  const [motor1Rad, setMotor1Rad] = useState(0)\n  const [motor2Rad, setMotor2Rad] = useState(0)\n  const [motor3Rad, setMotor3Rad] = useState(0)\n  const [motorInfo, setMotorInfo] = useState({})\n\n  useEffect(() => {\n    const motor_socket = io(\"http://192.168.23.1:5000/motor\")\n    motor_socket.emit(\"connection\", {\"id\" : \"motor1\"})\n    motor_socket.emit(\"connection\", {\"id\" : \"motor2\"})\n    motor_socket.emit(\"connection\", {\"id\" : \"motor3\"})\n    motor_socket.emit(\"enable_fetch_motor\")\n    setMotorSocket(motor_socket)\n    const socket = io(\"http://192.168.23.1:5000/\")\n    socket.on('fetch_motor', function(value) {\n      setMotorInfo(value)\n    })\n  }, [])\n\n  const sendMotorRotate = (id, rad) => {\n    motorSocket.emit(\"rotate\", {\"id\" : id, \"rad\" : parseFloat(rad)})\n  }\n\n  const sendMotorRotate1 = () => {\n    sendMotorRotate(\"motor1\", motor1Rad)\n  }\n  \n  const sendMotorRotate2 = () => {\n    sendMotorRotate(\"motor2\", motor2Rad)\n  }\n\n  const sendMotorRotate3 = () => {\n    sendMotorRotate(\"motor3\", motor3Rad)\n  }\n\n  const showMotorInfo = (id) => {\n    const info = motorInfo[id] || null\n    if (info == null) {\n      return \"None\"\n    }\n    return (\n    <div>\n      <p>\n        <label>Rad:</label>\n        {info.position || \"NA\"}\n      </p>\n      <p>\n        <label>velocity</label>\n        {info.velocity || \"NA\"}\n      </p>\n      <p>\n        <label>torque</label>\n        {info.torque || \"NA\"}\n      </p>\n      <p>\n        <label>received_unix_time</label>\n        {info.received_unix_time || \"NA\"}\n      </p>\n    </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label>Motor1:Rad</label>\n        <input value={motor1Rad} onChange={(event) => {setMotor1Rad(event.target.value)}} />\n        <button type=\"button\" onClick={sendMotorRotate1}>送信</button>\n      </div>\n      {showMotorInfo(\"motor1\")}\n      <div>\n        <label>Motor2:Rad</label>\n        <input value={motor2Rad} onChange={(event) => {setMotor2Rad(event.target.value)}} />\n        <button type=\"button\" onClick={sendMotorRotate2}>送信</button>\n      </div>\n      {showMotorInfo(\"motor2\")}\n      <div>\n        <label>Motor3:Rad</label>\n        <input value={motor3Rad} onChange={(event) => {setMotor3Rad(event.target.value)}} />\n        <button type=\"button\" onClick={sendMotorRotate3}>送信</button>\n      </div>\n      {showMotorInfo(\"motor3\")}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}